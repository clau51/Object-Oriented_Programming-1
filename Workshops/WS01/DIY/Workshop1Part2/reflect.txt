//Name: Carmen Lau
//Student ID: 166689216
//Email: clau51@myseneca.ca
//Date: September 19, 2022
//Section: NBB
//I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.

Through the completion of both deliverables of the workshop, I have begun to understand some important concepts of OOP244. This includes of modular programming, the use of namespaces, header guards, scopes, and object-oriented syntax. From part 1 of the workshop, we were told to breakdown a single file of code into multiple modules. This includes of header files and implementation files. While doing so, we were introduced to namespaces which is important to avoid naming collisions since many programmers may use the same identifiers. As such, since we are "sdds" students, we have been using the sdds namespace in all of our code. At the same time, we have been consistently using "using namespace std" in our implementation files to avoid having to use the scope resolution operator when using anything that lives in the std namespace. I have also learned to understand that we should never add "using namespace" to our header files. I have also learned to create a basic header file using both header guards and namespaces. Due to the fact that we were to create many header files, I have learned and adapted to creating a header file a certain way by first including header guards followed by our "sdds" namespace, ending with an #endif. Knowing the importance of header guards (due to possibility of including a header file in another module that already has had been previously defined), I know now to always include header guards in all my header files.

Although the previous above concepts mentioned above were important, I believe a very important concept I learned throughout each deliverable is modular programming. By breaking down a large implementation file into multiple modules, it made coding much easier as I was able to refer to different modules for certain functions, such as File.cpp, Util.cpp, and ShoppingRec.cpp from the first deliverable. If I had to search for some function in relation to file reading, I would know that I had to search in the file.cpp file, with all the prototypes defined in the file.h file. In part 2 of the workshop, I wanted to create a new module called "helpers.cpp" and "helpers.h" to move some of my helper functions out of my word.cpp and word.h modules (ie. checkLen function, searchWordIndex) to make it easier for me to refer to my defined functions, however matrix made it very limited. I also wanted to put my "getInt" function in a Utils.cpp module, however, matrix didn't allow my file to compile properly, and hence I had to put it in my word modules. In essence, through the completion of both deliverables, my understanding of modular programming had improved significantly since I had very limited knowledge while studying IPC144.

Additionally, I learned some basic C++ syntax as I had been accustomed to C syntax. This includes of the insertion/extraction operators when using cout/cin, as well as the directive of #include <iostream> instead of #include <stdio.h>. I found that C++ made things much easier as we no longer needed to type scanf along with its format specifiers and printf. Essentially, using the insertion/extraction operators saved time and effort.

Lastly, by completing part 2 of workshop, I was able to understand text files better. By using the step into/step out function I was able to view what I was reading from the file. Although I initially struggled significantly, I started to understand that I was able to use fgetc to use as a position indicator to map out the location I was in the stream. I think that this was a great accomplishment for me as I struggled with text files significantly in IPC144, despite knowing that this concept is extremely important in programming. Through the completion of this workshop, I feel much more confident in dealing with text files.
