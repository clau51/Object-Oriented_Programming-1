//Name: Carmen Lau
//Student ID: 166689216
//Email: clau51@myseneca.ca
//Date: November 29, 2022
//Section: NBB
//I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.

This project was extremely tedious; however, I was very happy that I was able to apply essentially everything that I learned from this course into this particular project. From encapsulation to inheritance to polymorphism, all three pillars to object orientation were applied. We dealt with encapsulation by making certain members functions and attributes of a class to either private, protected, or public. For example, in the MenuItem class, we only wanted Menu to have access to MenuItem and hence, we made the whole class private. That ensures that none of MenuItem is messed around in the client code; Menu is the one and only one that can do that. On the other hand, we made many member functions protected in the Vehicle class so that only derived classes of the Vehicle class can access certain member functions, as opposed to any client code. We also dealt with inheritance where a class would inherit from another class. In our project, our Vehicle class inherits from the ReadWritable class. The Car and Motorcycle class are also both derived classes of the Vehicle class, making these relationships a transitive relationship. We also learned about virtuality which is a form of polymorphism since when a virtual function is called, it calls the most derived version of the function existing between a base class and a derived class. For example, in our project, we overloaded a helper left shift and right shift operator in the ReadWritable module. Inside the definition of this operator, we call the read or the write method and because the read/write method is virtual, whenever we call the left shift or right shift operator, it will call the most derived version of the read/write methods. This is essential since we may be using these overloaded operators on the Car object or a Motorcycle object, which have different read and write methods as well. I also used operator overloading as well as templates in this project, which are also other forms of polymorphism. After completing my code in Parking.cpp, I realized that there was a significant amount of redundancy and repeated logic, particularly because we were either dealing with a Car or a Motorcycle. That was when I realized that I could use templates since the whole logic was essentially the exact same, other than the fact that it was a different type. This made my code much easier to maintain and less redundant since I didn't have to look at a huge pile of code that did the exact same thing. Instead, it was shortened into a template, and hence showed me how powerful templates were.  

Additionally, there were also some challenges I encountered. One particularly frustrating aspect is that there were so many different modules, I just got confused and forgot some of the previous methods that I had created. For example, when I was creating the returnVehicle() method for the Parking class, I completely forgot that I had overloaded the == operator so that I could compare a string and a Vehicle object's license plate to determine if they matched. Instead, I was thinking in circles, including creating another public method to get the license plate, until I realized that I had coded the operator overload. Overall, because there were so many different modules, I had completely forgotten the previous logic that I had coded.

To conclude, this project was very enjoyable as it simulated my brain to use everything that we had learned throughout the semester. I was also very proud of the fact that I was able to complete it as I initially struggled significantly with IPC144. However, the more exposure I got with coding, I was able to overcome the initial learning curve. The fact that I was able to complete this milestone is an indication that I have learned a lot in this course.